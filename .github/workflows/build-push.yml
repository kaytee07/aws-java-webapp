- name: Create deployment files
  env:
    IMAGE_URI: ${{ steps.build-image.outputs.image-uri }}
    EXECUTION_ROLE_ARN: ${{ steps.get-execution-role.outputs.execution-role-arn }}
  run: |
    # CodeDeploy AppSpec
    cat > appspec.yml << EOF
    version: 0.0
    Resources:
      - TargetService:
          Type: AWS::ECS::Service
          Properties:
            TaskDefinition: <TASK_DEFINITION>
            LoadBalancerInfo:
              ContainerName: "${{ env.CONTAINER_NAME }}"
              ContainerPort: ${{ env.CONTAINER_PORT }}
    EOF
    
    # ECS Task Definition JSON
    cat > taskdef.json << EOF
    {
      "family": "${{ env.ECS_TASK_DEFINITION }}",
      "networkMode": "awsvpc",
      "requiresCompatibilities": ["FARGATE"],
      "cpu": "256",
      "memory": "512",
      "executionRoleArn": "$EXECUTION_ROLE_ARN",
      "containerDefinitions": [
        {
          "name": "${{ env.CONTAINER_NAME }}",
          "image": "$IMAGE_URI",
          "essential": true,
          "portMappings": [
            {
              "containerPort": ${{ env.CONTAINER_PORT }},
              "protocol": "tcp"
            }
          ],
          "logConfiguration": {
            "logDriver": "awslogs",
            "options": {
              "awslogs-group": "/ecs/${{ env.ECS_TASK_DEFINITION }}",
              "awslogs-region": "${{ env.AWS_REGION }}",
              "awslogs-stream-prefix": "ecs"
            }
          }
        }
      ]
    }
    EOF
    
    # Image details for CodePipeline
    cat > imagedefinitions.json << EOF
    [
      {
        "name": "${{ env.CONTAINER_NAME }}",
        "imageUri": "$IMAGE_URI"
      }
    ]
    EOF
    
    echo "Created deployment files:"
    ls -la *.yml *.json || { echo "Error: Deployment files not found"; exit 1; }

- name: Install zip utility
  run: |
    sudo apt-get update
    sudo apt-get install -y zip
    zip --version || { echo "Error: zip utility not installed"; exit 1; }

- name: Create and upload deployment zip for CodePipeline
  run: |
    echo "Current directory:"
    pwd
    echo "Files in directory:"
    ls -la
    zip deployment-files.zip appspec.yml taskdef.json imagedefinitions.json || { echo "Error: Failed to create zip file"; exit 1; }
    echo "Zip file created:"
    ls -la deployment-files.zip
    aws s3 cp deployment-files.zip s3://${{ env.S3_BUCKET }}/deployment-files.zip --region ${{ env.AWS_REGION }} || { echo "Error: Failed to upload to S3"; exit 1; }
    echo "Uploaded deployment zip for CodePipeline to: s3://${{ env.S3_BUCKET }}/deployment-files.zip"

- name: Start CodePipeline execution
  run: |
    aws codepipeline start-pipeline-execution --name SpringBootPipeline --region ${{ env.AWS_REGION }} || { echo "Error: Failed to start CodePipeline"; exit 1; }
    echo "Triggered CodePipeline execution for: SpringBootPipeline"