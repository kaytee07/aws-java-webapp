name: Build, Push to ECR and Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 714377355835.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: spring-boot-app-repo
  ECS_CLUSTER: SpringBootCluster
  ECS_SERVICE: spring-boot-service
  CONTAINER_NAME: spring-boot-container
  CONTAINER_PORT: 8080
  CODE_DEPLOY_APP: SpringBootCodeDeployApp
  CODE_DEPLOY_GROUP: SpringBootDeploymentGroup

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::714377355835:role/taylor-ecs-iam-policy-GitHubOidcRole-CqMPvnHBh8zq
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Create appspec.yaml
        run: |
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "<TASK_DEFINITION>"
                  LoadBalancerInfo:
                    ContainerName: "${{ env.CONTAINER_NAME }}"
                    ContainerPort: ${{ env.CONTAINER_PORT }}
          EOF

      - name: Upload appspec.yaml artifact
        uses: actions/upload-artifact@v4
        with:
          name: appspec
          path: appspec.yaml

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download appspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: appspec

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::714377355835:role/taylor-ecs-iam-policy-GitHubOidcRole-CqMPvnHBh8zq
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current task definition
        id: get-task-def
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "CURRENT_TASK_DEF=$CURRENT_TASK_DEF" >> $GITHUB_ENV

      - name: Register new task definition
        id: register-task
        run: |
          # Create new task definition with updated image
          aws ecs register-task-definition \
            --cli-input-json "$(aws ecs describe-task-definition \
              --task-definition ${{ env.CURRENT_TASK_DEF }} \
              --query 'taskDefinition' | \
            jq --arg image "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" \
               '.containerDefinitions[0].image = $image | 
                del(.taskDefinitionArn) | 
                del(.revision) | 
                del(.status) | 
                del(.requiresAttributes) | 
                del(.compatibilities) | 
                del(.registeredAt) | 
                del(.registeredBy)')" \
            --output text

      - name: Create CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP }} \
            --deployment-group-name ${{ env.CODE_DEPLOY_GROUP }} \
            --revision '{
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "'"$(cat appspec.yaml | jq -s -R .)"'",
                "sha256": "'"$(sha256sum appspec.yaml | cut -d\" \" -f1)"'"
              }
            }'

      - name: Wait for deployment to complete
        run: |
          # Get the latest deployment ID
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name ${{ env.CODE_DEPLOY_APP }} \
            --deployment-group-name ${{ env.CODE_DEPLOY_GROUP }} \
            --max-items 1 \
            --query 'deployments[0]' \
            --output text)
          
          # Wait for deployment to complete
          aws deploy wait deployment-successful \
            --deployment-id $DEPLOYMENT_ID