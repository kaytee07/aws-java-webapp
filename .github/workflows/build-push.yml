name: Build, Push, and Upload Deployment Bundle

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: "eu-west-1"
  ECR_REPOSITORY: "spring-boot-app-repo"
  ARTIFACT_BUCKET: "714377355835-springboot-artifacts" # must match your CFN template

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::714377355835:role/taylor-ecs-iam-policy-GitHubOidcRole-CqMPvnHBh8zq
          aws-region: eu-west-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker tag $IMAGE_URI $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $IMAGE_URI
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Generate taskdef.json
        run: |
          cat > taskdef.json <<EOL
          {
            "family": "spring-boot-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "containerDefinitions": [
              {
                "name": "spring-boot-container",
                "image": "${IMAGE_URI}",
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "protocol": "tcp"
                  }
                ],
                "essential": true
              }
            ]
          }
          EOL

      - name: Generate appspec.json
        run: |
          cat > appspec.json <<EOL
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "taskdef.json",
                    "LoadBalancerInfo": {
                      "ContainerName": "spring-boot-container",
                      "ContainerPort": 8080
                    }
                  }
                }
              }
            ]
          }
          EOL

      - name: Package AppSpec bundle
        run: zip appspec-bundle.zip appspec.json taskdef.json

      - name: Upload bundle to S3
        run: aws s3 cp appspec-bundle.zip s3://${{ env.ARTIFACT_BUCKET }}/

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment bundle uploaded!"
          echo "- Image: $IMAGE_URI"
          echo "- Bundle: s3://${{ env.ARTIFACT_BUCKET }}/appspec-bundle.zip"
          echo "- CodePipeline will automatically pick up this artifact."
