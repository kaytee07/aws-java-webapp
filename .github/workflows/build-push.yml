name: Build, Push to ECR and Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 714377355835.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: spring-boot-app-repo
  ECS_CLUSTER: SpringBootCluster
  ECS_SERVICE: spring-boot-service
  CONTAINER_NAME: spring-boot-container
  CONTAINER_PORT: 8080
  CODE_DEPLOY_APP: SpringBootCodeDeployApp
  CODE_DEPLOY_GROUP: SpringBootDeploymentGroup
  TASK_DEFINITION_FAMILY: spring-boot-task-definition

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::714377355835:role/taylor-ecs-iam-policy-GitHubOidcRole-CqMPvnHBh8zq
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Get current task definition
        run: |
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FAMILY }} --query 'taskDefinition')
          echo "TASK_DEF_JSON=$TASK_DEF_JSON" >> $GITHUB_ENV

      - name: Create appspec.yaml with placeholder
        run: |
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "<TASK_DEFINITION>"
                  LoadBalancerInfo:
                    ContainerName: "${{ env.CONTAINER_NAME }}"
                    ContainerPort: ${{ env.CONTAINER_PORT }}
          EOF

      - name: Upload appspec.yaml artifact
        uses: actions/upload-artifact@v4
        with:
          name: appspec
          path: appspec.yaml

      - name: Upload task definition JSON artifact
        run: |
          echo '${{ env.TASK_DEF_JSON }}' > task-definition.json
        shell: bash

      - name: Upload task definition artifact
        uses: actions/upload-artifact@v4
        with:
          name: task-definition
          path: task-definition.json

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download appspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: appspec

      - name: Download task definition JSON
        uses: actions/download-artifact@v4
        with:
          name: task-definition

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::714377355835:role/taylor-ecs-iam-policy-GitHubOidcRole-CqMPvnHBh8zq
          aws-region: ${{ env.AWS_REGION }}

      - name: Register new task definition
        id: register-task
        run: |
          # Update the image in the task definition
          UPDATED_TASK_DEF=$(jq --arg image "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" \
            '.containerDefinitions[0].image = $image | 
             del(.taskDefinitionArn) | 
             del(.revision) | 
             del(.status) | 
             del(.requiresAttributes) | 
             del(.compatibilities) | 
             del(.registeredAt) | 
             del(.registeredBy) | 
             del(.deregisteredAt)' task-definition.json)
          
          echo "$UPDATED_TASK_DEF" > updated-task-definition.json
          
          # Register the new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update appspec.yaml with new task definition ARN
        run: |
          # Replace the placeholder with the actual task definition ARN
          sed -i "s|<TASK_DEFINITION>|$NEW_TASK_DEF_ARN|g" appspec.yaml
          cat appspec.yaml

      - name: Create CodeDeploy deployment
        run: |
          # Create deployment using the updated appspec.yaml
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP }} \
            --deployment-group-name ${{ env.CODE_DEPLOY_GROUP }} \
            --revision '{
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "'"$(cat appspec.yaml | sed 's/"/\\"/g' | tr -d '\n')"'",
                "sha256": "'"$(sha256sum appspec.yaml | awk '{print $1}')"'"
              }
            }' \
            --query 'deploymentId' \
            --output text)
          
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for deployment to complete
        run: |
          if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "None" ]; then
            echo "Waiting for deployment $DEPLOYMENT_ID to complete..."
            aws deploy wait deployment-successful \
              --deployment-id $DEPLOYMENT_ID
            echo "Deployment completed successfully!"
          else
            echo "No deployment ID found. Checking if deployment was created..."
            # Fallback: check for any recent deployments
            LATEST_DEPLOYMENT=$(aws deploy list-deployments \
              --application-name ${{ env.CODE_DEPLOY_APP }} \
              --deployment-group-name ${{ env.CODE_DEPLOY_GROUP }} \
              --max-items 1 \
              --query 'deployments[0]' \
              --output text)
          
            if [ -n "$LATEST_DEPLOYMENT" ] && [ "$LATEST_DEPLOYMENT" != "None" ]; then
              echo "Waiting for latest deployment $LATEST_DEPLOYMENT to complete..."
              aws deploy wait deployment-successful \
                --deployment-id $LATEST_DEPLOYMENT
              echo "Deployment completed successfully!"
            else
              echo "No deployments found. This might be the first deployment."
            fi
          fi